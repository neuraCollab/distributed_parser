// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: task.proto

#include "task.pb.h"
#include "task.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace parser {

static const char* Coordinator_method_names[] = {
  "/parser.Coordinator/GetTask",
  "/parser.Coordinator/ReportResult",
  "/parser.Coordinator/SubmitTask",
};

std::unique_ptr< Coordinator::Stub> Coordinator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Coordinator::Stub> stub(new Coordinator::Stub(channel, options));
  return stub;
}

Coordinator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTask_(Coordinator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportResult_(Coordinator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitTask_(Coordinator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Coordinator::Stub::GetTask(::grpc::ClientContext* context, const ::parser::TaskRequest& request, ::parser::TaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::parser::TaskRequest, ::parser::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTask_, context, request, response);
}

void Coordinator::Stub::async::GetTask(::grpc::ClientContext* context, const ::parser::TaskRequest* request, ::parser::TaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::parser::TaskRequest, ::parser::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, std::move(f));
}

void Coordinator::Stub::async::GetTask(::grpc::ClientContext* context, const ::parser::TaskRequest* request, ::parser::TaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::parser::TaskResponse>* Coordinator::Stub::PrepareAsyncGetTaskRaw(::grpc::ClientContext* context, const ::parser::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::parser::TaskResponse, ::parser::TaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::parser::TaskResponse>* Coordinator::Stub::AsyncGetTaskRaw(::grpc::ClientContext* context, const ::parser::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Coordinator::Stub::ReportResult(::grpc::ClientContext* context, const ::parser::TaskResult& request, ::parser::ResultAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::parser::TaskResult, ::parser::ResultAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReportResult_, context, request, response);
}

void Coordinator::Stub::async::ReportResult(::grpc::ClientContext* context, const ::parser::TaskResult* request, ::parser::ResultAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::parser::TaskResult, ::parser::ResultAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportResult_, context, request, response, std::move(f));
}

void Coordinator::Stub::async::ReportResult(::grpc::ClientContext* context, const ::parser::TaskResult* request, ::parser::ResultAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReportResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::parser::ResultAck>* Coordinator::Stub::PrepareAsyncReportResultRaw(::grpc::ClientContext* context, const ::parser::TaskResult& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::parser::ResultAck, ::parser::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReportResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::parser::ResultAck>* Coordinator::Stub::AsyncReportResultRaw(::grpc::ClientContext* context, const ::parser::TaskResult& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReportResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Coordinator::Stub::SubmitTask(::grpc::ClientContext* context, const ::parser::SubmitTaskRequest& request, ::parser::SubmitTaskResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::parser::SubmitTaskRequest, ::parser::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitTask_, context, request, response);
}

void Coordinator::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::parser::SubmitTaskRequest* request, ::parser::SubmitTaskResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::parser::SubmitTaskRequest, ::parser::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, std::move(f));
}

void Coordinator::Stub::async::SubmitTask(::grpc::ClientContext* context, const ::parser::SubmitTaskRequest* request, ::parser::SubmitTaskResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::parser::SubmitTaskResponse>* Coordinator::Stub::PrepareAsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::parser::SubmitTaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::parser::SubmitTaskResponse, ::parser::SubmitTaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::parser::SubmitTaskResponse>* Coordinator::Stub::AsyncSubmitTaskRaw(::grpc::ClientContext* context, const ::parser::SubmitTaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

Coordinator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Coordinator::Service, ::parser::TaskRequest, ::parser::TaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::parser::TaskRequest* req,
             ::parser::TaskResponse* resp) {
               return service->GetTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Coordinator::Service, ::parser::TaskResult, ::parser::ResultAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::parser::TaskResult* req,
             ::parser::ResultAck* resp) {
               return service->ReportResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Coordinator::Service, ::parser::SubmitTaskRequest, ::parser::SubmitTaskResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::parser::SubmitTaskRequest* req,
             ::parser::SubmitTaskResponse* resp) {
               return service->SubmitTask(ctx, req, resp);
             }, this)));
}

Coordinator::Service::~Service() {
}

::grpc::Status Coordinator::Service::GetTask(::grpc::ServerContext* context, const ::parser::TaskRequest* request, ::parser::TaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Coordinator::Service::ReportResult(::grpc::ServerContext* context, const ::parser::TaskResult* request, ::parser::ResultAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Coordinator::Service::SubmitTask(::grpc::ServerContext* context, const ::parser::SubmitTaskRequest* request, ::parser::SubmitTaskResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace parser

